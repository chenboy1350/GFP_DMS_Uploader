//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace DMSUpload_Helper.GPFMaintenance {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="GPFMaintenanceSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class GPFMaintenance : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ChangePasswordDBServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeParameterASOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParameter1OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParameterBySoapOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParameter2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAuthenOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAuthenByPassOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAuthenBySoapOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSystemNameBySoapOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoffOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLogBySoapOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptCitizenOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecryptCitizenOperationCompleted;
        
        private System.Threading.SendOrPostCallback DecryptOperationCompleted;
        
        private System.Threading.SendOrPostCallback Encrypt1OperationCompleted;
        
        private System.Threading.SendOrPostCallback EncryptType2StringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIT_UserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIT_PasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIT_ConnectionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public GPFMaintenance() {
            this.Url = global::DMSUpload_Helper.Properties.Settings.Default.DMSUpload_Helper_GPFMaintenance_GPFMaintenance;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ChangePasswordDBServiceCompletedEventHandler ChangePasswordDBServiceCompleted;
        
        /// <remarks/>
        public event ChangePasswordUserCompletedEventHandler ChangePasswordUserCompleted;
        
        /// <remarks/>
        public event ChangeParameterASCompletedEventHandler ChangeParameterASCompleted;
        
        /// <remarks/>
        public event GetParameter1CompletedEventHandler GetParameter1Completed;
        
        /// <remarks/>
        public event GetParameterBySoapCompletedEventHandler GetParameterBySoapCompleted;
        
        /// <remarks/>
        public event GetParameter2CompletedEventHandler GetParameter2Completed;
        
        /// <remarks/>
        public event GetConCompletedEventHandler GetConCompleted;
        
        /// <remarks/>
        public event CheckAuthenCompletedEventHandler CheckAuthenCompleted;
        
        /// <remarks/>
        public event CheckAuthenByPassCompletedEventHandler CheckAuthenByPassCompleted;
        
        /// <remarks/>
        public event CheckAuthenBySoapCompletedEventHandler CheckAuthenBySoapCompleted;
        
        /// <remarks/>
        public event GetSystemNameCompletedEventHandler GetSystemNameCompleted;
        
        /// <remarks/>
        public event GetSystemNameBySoapCompletedEventHandler GetSystemNameBySoapCompleted;
        
        /// <remarks/>
        public event LogoffCompletedEventHandler LogoffCompleted;
        
        /// <remarks/>
        public event InsertLogCompletedEventHandler InsertLogCompleted;
        
        /// <remarks/>
        public event InsertLogBySoapCompletedEventHandler InsertLogBySoapCompleted;
        
        /// <remarks/>
        public event EncryptCompletedEventHandler EncryptCompleted;
        
        /// <remarks/>
        public event EncryptCitizenCompletedEventHandler EncryptCitizenCompleted;
        
        /// <remarks/>
        public event DecryptCitizenCompletedEventHandler DecryptCitizenCompleted;
        
        /// <remarks/>
        public event DecryptCompletedEventHandler DecryptCompleted;
        
        /// <remarks/>
        public event Encrypt1CompletedEventHandler Encrypt1Completed;
        
        /// <remarks/>
        public event EncryptType2StringCompletedEventHandler EncryptType2StringCompleted;
        
        /// <remarks/>
        public event GetIT_UserCompletedEventHandler GetIT_UserCompleted;
        
        /// <remarks/>
        public event GetIT_PasswordCompletedEventHandler GetIT_PasswordCompleted;
        
        /// <remarks/>
        public event GetIT_ConnectionCompletedEventHandler GetIT_ConnectionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePasswordDBService", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePasswordDBService(string SystemCode, string UserNameIT, string OLD_PasswordIT, string NEW_PasswordIT, string uid, string pwd) {
            object[] results = this.Invoke("ChangePasswordDBService", new object[] {
                        SystemCode,
                        UserNameIT,
                        OLD_PasswordIT,
                        NEW_PasswordIT,
                        uid,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordDBServiceAsync(string SystemCode, string UserNameIT, string OLD_PasswordIT, string NEW_PasswordIT, string uid, string pwd) {
            this.ChangePasswordDBServiceAsync(SystemCode, UserNameIT, OLD_PasswordIT, NEW_PasswordIT, uid, pwd, null);
        }
        
        /// <remarks/>
        public void ChangePasswordDBServiceAsync(string SystemCode, string UserNameIT, string OLD_PasswordIT, string NEW_PasswordIT, string uid, string pwd, object userState) {
            if ((this.ChangePasswordDBServiceOperationCompleted == null)) {
                this.ChangePasswordDBServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordDBServiceOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordDBService", new object[] {
                        SystemCode,
                        UserNameIT,
                        OLD_PasswordIT,
                        NEW_PasswordIT,
                        uid,
                        pwd}, this.ChangePasswordDBServiceOperationCompleted, userState);
        }
        
        private void OnChangePasswordDBServiceOperationCompleted(object arg) {
            if ((this.ChangePasswordDBServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordDBServiceCompleted(this, new ChangePasswordDBServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePasswordUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePasswordUser(string SystemCode, string UserName, string OLD_Password, string NEW_Password, string Server, string Database, string uid, string pwd) {
            object[] results = this.Invoke("ChangePasswordUser", new object[] {
                        SystemCode,
                        UserName,
                        OLD_Password,
                        NEW_Password,
                        Server,
                        Database,
                        uid,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordUserAsync(string SystemCode, string UserName, string OLD_Password, string NEW_Password, string Server, string Database, string uid, string pwd) {
            this.ChangePasswordUserAsync(SystemCode, UserName, OLD_Password, NEW_Password, Server, Database, uid, pwd, null);
        }
        
        /// <remarks/>
        public void ChangePasswordUserAsync(string SystemCode, string UserName, string OLD_Password, string NEW_Password, string Server, string Database, string uid, string pwd, object userState) {
            if ((this.ChangePasswordUserOperationCompleted == null)) {
                this.ChangePasswordUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordUserOperationCompleted);
            }
            this.InvokeAsync("ChangePasswordUser", new object[] {
                        SystemCode,
                        UserName,
                        OLD_Password,
                        NEW_Password,
                        Server,
                        Database,
                        uid,
                        pwd}, this.ChangePasswordUserOperationCompleted, userState);
        }
        
        private void OnChangePasswordUserOperationCompleted(object arg) {
            if ((this.ChangePasswordUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordUserCompleted(this, new ChangePasswordUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeParameterAS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeParameterAS(string SystemCode, string UserName, string OLD_Password, string NEW_Password, string uid, string pwd) {
            object[] results = this.Invoke("ChangeParameterAS", new object[] {
                        SystemCode,
                        UserName,
                        OLD_Password,
                        NEW_Password,
                        uid,
                        pwd});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeParameterASAsync(string SystemCode, string UserName, string OLD_Password, string NEW_Password, string uid, string pwd) {
            this.ChangeParameterASAsync(SystemCode, UserName, OLD_Password, NEW_Password, uid, pwd, null);
        }
        
        /// <remarks/>
        public void ChangeParameterASAsync(string SystemCode, string UserName, string OLD_Password, string NEW_Password, string uid, string pwd, object userState) {
            if ((this.ChangeParameterASOperationCompleted == null)) {
                this.ChangeParameterASOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeParameterASOperationCompleted);
            }
            this.InvokeAsync("ChangeParameterAS", new object[] {
                        SystemCode,
                        UserName,
                        OLD_Password,
                        NEW_Password,
                        uid,
                        pwd}, this.ChangeParameterASOperationCompleted, userState);
        }
        
        private void OnChangeParameterASOperationCompleted(object arg) {
            if ((this.ChangeParameterASCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeParameterASCompleted(this, new ChangeParameterASCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetParameter1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetParameter1(string Code, string ParameterName, ref string Parameter1, ref string ErrorMSG) {
            object[] results = this.Invoke("GetParameter1", new object[] {
                        Code,
                        ParameterName,
                        Parameter1,
                        ErrorMSG});
            Parameter1 = ((string)(results[1]));
            ErrorMSG = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetParameter1Async(string Code, string ParameterName, string Parameter1, string ErrorMSG) {
            this.GetParameter1Async(Code, ParameterName, Parameter1, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void GetParameter1Async(string Code, string ParameterName, string Parameter1, string ErrorMSG, object userState) {
            if ((this.GetParameter1OperationCompleted == null)) {
                this.GetParameter1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParameter1OperationCompleted);
            }
            this.InvokeAsync("GetParameter1", new object[] {
                        Code,
                        ParameterName,
                        Parameter1,
                        ErrorMSG}, this.GetParameter1OperationCompleted, userState);
        }
        
        private void OnGetParameter1OperationCompleted(object arg) {
            if ((this.GetParameter1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParameter1Completed(this, new GetParameter1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetParameterBySoap", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetParameterBySoap(string Code, string ParameterName, ParameterValue ParameterType) {
            object[] results = this.Invoke("GetParameterBySoap", new object[] {
                        Code,
                        ParameterName,
                        ParameterType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetParameterBySoapAsync(string Code, string ParameterName, ParameterValue ParameterType) {
            this.GetParameterBySoapAsync(Code, ParameterName, ParameterType, null);
        }
        
        /// <remarks/>
        public void GetParameterBySoapAsync(string Code, string ParameterName, ParameterValue ParameterType, object userState) {
            if ((this.GetParameterBySoapOperationCompleted == null)) {
                this.GetParameterBySoapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParameterBySoapOperationCompleted);
            }
            this.InvokeAsync("GetParameterBySoap", new object[] {
                        Code,
                        ParameterName,
                        ParameterType}, this.GetParameterBySoapOperationCompleted, userState);
        }
        
        private void OnGetParameterBySoapOperationCompleted(object arg) {
            if ((this.GetParameterBySoapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParameterBySoapCompleted(this, new GetParameterBySoapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetParameter2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetParameter2(string Code, string ParameterName, ref string Parameter1, ref string Parameter2, ref string ErrorMSG) {
            object[] results = this.Invoke("GetParameter2", new object[] {
                        Code,
                        ParameterName,
                        Parameter1,
                        Parameter2,
                        ErrorMSG});
            Parameter1 = ((string)(results[1]));
            Parameter2 = ((string)(results[2]));
            ErrorMSG = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetParameter2Async(string Code, string ParameterName, string Parameter1, string Parameter2, string ErrorMSG) {
            this.GetParameter2Async(Code, ParameterName, Parameter1, Parameter2, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void GetParameter2Async(string Code, string ParameterName, string Parameter1, string Parameter2, string ErrorMSG, object userState) {
            if ((this.GetParameter2OperationCompleted == null)) {
                this.GetParameter2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParameter2OperationCompleted);
            }
            this.InvokeAsync("GetParameter2", new object[] {
                        Code,
                        ParameterName,
                        Parameter1,
                        Parameter2,
                        ErrorMSG}, this.GetParameter2OperationCompleted, userState);
        }
        
        private void OnGetParameter2OperationCompleted(object arg) {
            if ((this.GetParameter2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParameter2Completed(this, new GetParameter2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCon", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCon(string Type) {
            object[] results = this.Invoke("GetCon", new object[] {
                        Type});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConAsync(string Type) {
            this.GetConAsync(Type, null);
        }
        
        /// <remarks/>
        public void GetConAsync(string Type, object userState) {
            if ((this.GetConOperationCompleted == null)) {
                this.GetConOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConOperationCompleted);
            }
            this.InvokeAsync("GetCon", new object[] {
                        Type}, this.GetConOperationCompleted, userState);
        }
        
        private void OnGetConOperationCompleted(object arg) {
            if ((this.GetConCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConCompleted(this, new GetConCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAuthen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckAuthen(ref object[] UserDetail, ref object[] UserRole, string Code, string uid, string pwd, ConnectAS400 TestConnectAS400, string ComputerName, ref string ErrorMSG) {
            object[] results = this.Invoke("CheckAuthen", new object[] {
                        UserDetail,
                        UserRole,
                        Code,
                        uid,
                        pwd,
                        TestConnectAS400,
                        ComputerName,
                        ErrorMSG});
            UserDetail = ((object[])(results[1]));
            UserRole = ((object[])(results[2]));
            ErrorMSG = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAuthenAsync(object[] UserDetail, object[] UserRole, string Code, string uid, string pwd, ConnectAS400 TestConnectAS400, string ComputerName, string ErrorMSG) {
            this.CheckAuthenAsync(UserDetail, UserRole, Code, uid, pwd, TestConnectAS400, ComputerName, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void CheckAuthenAsync(object[] UserDetail, object[] UserRole, string Code, string uid, string pwd, ConnectAS400 TestConnectAS400, string ComputerName, string ErrorMSG, object userState) {
            if ((this.CheckAuthenOperationCompleted == null)) {
                this.CheckAuthenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAuthenOperationCompleted);
            }
            this.InvokeAsync("CheckAuthen", new object[] {
                        UserDetail,
                        UserRole,
                        Code,
                        uid,
                        pwd,
                        TestConnectAS400,
                        ComputerName,
                        ErrorMSG}, this.CheckAuthenOperationCompleted, userState);
        }
        
        private void OnCheckAuthenOperationCompleted(object arg) {
            if ((this.CheckAuthenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAuthenCompleted(this, new CheckAuthenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAuthenByPass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckAuthenByPass(ref object[] UserDetail, ref object[] UserRole, string Code, string uid, string ComputerName, ref string ErrorMSG) {
            object[] results = this.Invoke("CheckAuthenByPass", new object[] {
                        UserDetail,
                        UserRole,
                        Code,
                        uid,
                        ComputerName,
                        ErrorMSG});
            UserDetail = ((object[])(results[1]));
            UserRole = ((object[])(results[2]));
            ErrorMSG = ((string)(results[3]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAuthenByPassAsync(object[] UserDetail, object[] UserRole, string Code, string uid, string ComputerName, string ErrorMSG) {
            this.CheckAuthenByPassAsync(UserDetail, UserRole, Code, uid, ComputerName, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void CheckAuthenByPassAsync(object[] UserDetail, object[] UserRole, string Code, string uid, string ComputerName, string ErrorMSG, object userState) {
            if ((this.CheckAuthenByPassOperationCompleted == null)) {
                this.CheckAuthenByPassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAuthenByPassOperationCompleted);
            }
            this.InvokeAsync("CheckAuthenByPass", new object[] {
                        UserDetail,
                        UserRole,
                        Code,
                        uid,
                        ComputerName,
                        ErrorMSG}, this.CheckAuthenByPassOperationCompleted, userState);
        }
        
        private void OnCheckAuthenByPassOperationCompleted(object arg) {
            if ((this.CheckAuthenByPassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAuthenByPassCompleted(this, new CheckAuthenByPassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckAuthenBySoap", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckAuthenBySoap(string Code, string uid, string pwd, ConnectAS400 TestConnectAS400, string ComputerName) {
            object[] results = this.Invoke("CheckAuthenBySoap", new object[] {
                        Code,
                        uid,
                        pwd,
                        TestConnectAS400,
                        ComputerName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAuthenBySoapAsync(string Code, string uid, string pwd, ConnectAS400 TestConnectAS400, string ComputerName) {
            this.CheckAuthenBySoapAsync(Code, uid, pwd, TestConnectAS400, ComputerName, null);
        }
        
        /// <remarks/>
        public void CheckAuthenBySoapAsync(string Code, string uid, string pwd, ConnectAS400 TestConnectAS400, string ComputerName, object userState) {
            if ((this.CheckAuthenBySoapOperationCompleted == null)) {
                this.CheckAuthenBySoapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAuthenBySoapOperationCompleted);
            }
            this.InvokeAsync("CheckAuthenBySoap", new object[] {
                        Code,
                        uid,
                        pwd,
                        TestConnectAS400,
                        ComputerName}, this.CheckAuthenBySoapOperationCompleted, userState);
        }
        
        private void OnCheckAuthenBySoapOperationCompleted(object arg) {
            if ((this.CheckAuthenBySoapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAuthenBySoapCompleted(this, new CheckAuthenBySoapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSystemName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool GetSystemName(ref string SystemName, string Code, ref string ErrorMSG) {
            object[] results = this.Invoke("GetSystemName", new object[] {
                        SystemName,
                        Code,
                        ErrorMSG});
            SystemName = ((string)(results[1]));
            ErrorMSG = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemNameAsync(string SystemName, string Code, string ErrorMSG) {
            this.GetSystemNameAsync(SystemName, Code, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void GetSystemNameAsync(string SystemName, string Code, string ErrorMSG, object userState) {
            if ((this.GetSystemNameOperationCompleted == null)) {
                this.GetSystemNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemNameOperationCompleted);
            }
            this.InvokeAsync("GetSystemName", new object[] {
                        SystemName,
                        Code,
                        ErrorMSG}, this.GetSystemNameOperationCompleted, userState);
        }
        
        private void OnGetSystemNameOperationCompleted(object arg) {
            if ((this.GetSystemNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemNameCompleted(this, new GetSystemNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSystemNameBySoap", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSystemNameBySoap(string Code) {
            object[] results = this.Invoke("GetSystemNameBySoap", new object[] {
                        Code});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSystemNameBySoapAsync(string Code) {
            this.GetSystemNameBySoapAsync(Code, null);
        }
        
        /// <remarks/>
        public void GetSystemNameBySoapAsync(string Code, object userState) {
            if ((this.GetSystemNameBySoapOperationCompleted == null)) {
                this.GetSystemNameBySoapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSystemNameBySoapOperationCompleted);
            }
            this.InvokeAsync("GetSystemNameBySoap", new object[] {
                        Code}, this.GetSystemNameBySoapOperationCompleted, userState);
        }
        
        private void OnGetSystemNameBySoapOperationCompleted(object arg) {
            if ((this.GetSystemNameBySoapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSystemNameBySoapCompleted(this, new GetSystemNameBySoapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Logoff", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Logoff(string Code, string uid, ref string ErrorMSG) {
            object[] results = this.Invoke("Logoff", new object[] {
                        Code,
                        uid,
                        ErrorMSG});
            ErrorMSG = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LogoffAsync(string Code, string uid, string ErrorMSG) {
            this.LogoffAsync(Code, uid, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void LogoffAsync(string Code, string uid, string ErrorMSG, object userState) {
            if ((this.LogoffOperationCompleted == null)) {
                this.LogoffOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoffOperationCompleted);
            }
            this.InvokeAsync("Logoff", new object[] {
                        Code,
                        uid,
                        ErrorMSG}, this.LogoffOperationCompleted, userState);
        }
        
        private void OnLogoffOperationCompleted(object arg) {
            if ((this.LogoffCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoffCompleted(this, new LogoffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertLog(string Code, string uid, string TaskName, string TaskDesc, ref string ErrorMSG) {
            object[] results = this.Invoke("InsertLog", new object[] {
                        Code,
                        uid,
                        TaskName,
                        TaskDesc,
                        ErrorMSG});
            ErrorMSG = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLogAsync(string Code, string uid, string TaskName, string TaskDesc, string ErrorMSG) {
            this.InsertLogAsync(Code, uid, TaskName, TaskDesc, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void InsertLogAsync(string Code, string uid, string TaskName, string TaskDesc, string ErrorMSG, object userState) {
            if ((this.InsertLogOperationCompleted == null)) {
                this.InsertLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLogOperationCompleted);
            }
            this.InvokeAsync("InsertLog", new object[] {
                        Code,
                        uid,
                        TaskName,
                        TaskDesc,
                        ErrorMSG}, this.InsertLogOperationCompleted, userState);
        }
        
        private void OnInsertLogOperationCompleted(object arg) {
            if ((this.InsertLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLogCompleted(this, new InsertLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertLogBySoap", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertLogBySoap(string Code, string uid, string TaskName, string TaskDesc) {
            object[] results = this.Invoke("InsertLogBySoap", new object[] {
                        Code,
                        uid,
                        TaskName,
                        TaskDesc});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertLogBySoapAsync(string Code, string uid, string TaskName, string TaskDesc) {
            this.InsertLogBySoapAsync(Code, uid, TaskName, TaskDesc, null);
        }
        
        /// <remarks/>
        public void InsertLogBySoapAsync(string Code, string uid, string TaskName, string TaskDesc, object userState) {
            if ((this.InsertLogBySoapOperationCompleted == null)) {
                this.InsertLogBySoapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLogBySoapOperationCompleted);
            }
            this.InvokeAsync("InsertLogBySoap", new object[] {
                        Code,
                        uid,
                        TaskName,
                        TaskDesc}, this.InsertLogBySoapOperationCompleted, userState);
        }
        
        private void OnInsertLogBySoapOperationCompleted(object arg) {
            if ((this.InsertLogBySoapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLogBySoapCompleted(this, new InsertLogBySoapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Encrypt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Encrypt(string Str, string uidAS, string pwdAS, ref string ErrorMSG) {
            object[] results = this.Invoke("Encrypt", new object[] {
                        Str,
                        uidAS,
                        pwdAS,
                        ErrorMSG});
            ErrorMSG = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptAsync(string Str, string uidAS, string pwdAS, string ErrorMSG) {
            this.EncryptAsync(Str, uidAS, pwdAS, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void EncryptAsync(string Str, string uidAS, string pwdAS, string ErrorMSG, object userState) {
            if ((this.EncryptOperationCompleted == null)) {
                this.EncryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptOperationCompleted);
            }
            this.InvokeAsync("Encrypt", new object[] {
                        Str,
                        uidAS,
                        pwdAS,
                        ErrorMSG}, this.EncryptOperationCompleted, userState);
        }
        
        private void OnEncryptOperationCompleted(object arg) {
            if ((this.EncryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptCompleted(this, new EncryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EncryptCitizen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptCitizen(string Str) {
            object[] results = this.Invoke("EncryptCitizen", new object[] {
                        Str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptCitizenAsync(string Str) {
            this.EncryptCitizenAsync(Str, null);
        }
        
        /// <remarks/>
        public void EncryptCitizenAsync(string Str, object userState) {
            if ((this.EncryptCitizenOperationCompleted == null)) {
                this.EncryptCitizenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptCitizenOperationCompleted);
            }
            this.InvokeAsync("EncryptCitizen", new object[] {
                        Str}, this.EncryptCitizenOperationCompleted, userState);
        }
        
        private void OnEncryptCitizenOperationCompleted(object arg) {
            if ((this.EncryptCitizenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptCitizenCompleted(this, new EncryptCitizenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DecryptCitizen", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DecryptCitizen(string Str) {
            object[] results = this.Invoke("DecryptCitizen", new object[] {
                        Str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecryptCitizenAsync(string Str) {
            this.DecryptCitizenAsync(Str, null);
        }
        
        /// <remarks/>
        public void DecryptCitizenAsync(string Str, object userState) {
            if ((this.DecryptCitizenOperationCompleted == null)) {
                this.DecryptCitizenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptCitizenOperationCompleted);
            }
            this.InvokeAsync("DecryptCitizen", new object[] {
                        Str}, this.DecryptCitizenOperationCompleted, userState);
        }
        
        private void OnDecryptCitizenOperationCompleted(object arg) {
            if ((this.DecryptCitizenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptCitizenCompleted(this, new DecryptCitizenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Decrypt", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Decrypt(string Str, string uidAS, string pwdAS, ref string ErrorMSG) {
            object[] results = this.Invoke("Decrypt", new object[] {
                        Str,
                        uidAS,
                        pwdAS,
                        ErrorMSG});
            ErrorMSG = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DecryptAsync(string Str, string uidAS, string pwdAS, string ErrorMSG) {
            this.DecryptAsync(Str, uidAS, pwdAS, ErrorMSG, null);
        }
        
        /// <remarks/>
        public void DecryptAsync(string Str, string uidAS, string pwdAS, string ErrorMSG, object userState) {
            if ((this.DecryptOperationCompleted == null)) {
                this.DecryptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDecryptOperationCompleted);
            }
            this.InvokeAsync("Decrypt", new object[] {
                        Str,
                        uidAS,
                        pwdAS,
                        ErrorMSG}, this.DecryptOperationCompleted, userState);
        }
        
        private void OnDecryptOperationCompleted(object arg) {
            if ((this.DecryptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DecryptCompleted(this, new DecryptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Encrypt1", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Encrypt1(string value) {
            object[] results = this.Invoke("Encrypt1", new object[] {
                        value});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Encrypt1Async(string value) {
            this.Encrypt1Async(value, null);
        }
        
        /// <remarks/>
        public void Encrypt1Async(string value, object userState) {
            if ((this.Encrypt1OperationCompleted == null)) {
                this.Encrypt1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncrypt1OperationCompleted);
            }
            this.InvokeAsync("Encrypt1", new object[] {
                        value}, this.Encrypt1OperationCompleted, userState);
        }
        
        private void OnEncrypt1OperationCompleted(object arg) {
            if ((this.Encrypt1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Encrypt1Completed(this, new Encrypt1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EncryptType2String", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string EncryptType2String(string value, string uidAS, string pwdAS) {
            object[] results = this.Invoke("EncryptType2String", new object[] {
                        value,
                        uidAS,
                        pwdAS});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EncryptType2StringAsync(string value, string uidAS, string pwdAS) {
            this.EncryptType2StringAsync(value, uidAS, pwdAS, null);
        }
        
        /// <remarks/>
        public void EncryptType2StringAsync(string value, string uidAS, string pwdAS, object userState) {
            if ((this.EncryptType2StringOperationCompleted == null)) {
                this.EncryptType2StringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEncryptType2StringOperationCompleted);
            }
            this.InvokeAsync("EncryptType2String", new object[] {
                        value,
                        uidAS,
                        pwdAS}, this.EncryptType2StringOperationCompleted, userState);
        }
        
        private void OnEncryptType2StringOperationCompleted(object arg) {
            if ((this.EncryptType2StringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EncryptType2StringCompleted(this, new EncryptType2StringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIT_User", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIT_User(string uidAS, string pwdAS) {
            object[] results = this.Invoke("GetIT_User", new object[] {
                        uidAS,
                        pwdAS});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIT_UserAsync(string uidAS, string pwdAS) {
            this.GetIT_UserAsync(uidAS, pwdAS, null);
        }
        
        /// <remarks/>
        public void GetIT_UserAsync(string uidAS, string pwdAS, object userState) {
            if ((this.GetIT_UserOperationCompleted == null)) {
                this.GetIT_UserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIT_UserOperationCompleted);
            }
            this.InvokeAsync("GetIT_User", new object[] {
                        uidAS,
                        pwdAS}, this.GetIT_UserOperationCompleted, userState);
        }
        
        private void OnGetIT_UserOperationCompleted(object arg) {
            if ((this.GetIT_UserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIT_UserCompleted(this, new GetIT_UserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIT_Password", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIT_Password(string uidAS, string pwdAS) {
            object[] results = this.Invoke("GetIT_Password", new object[] {
                        uidAS,
                        pwdAS});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIT_PasswordAsync(string uidAS, string pwdAS) {
            this.GetIT_PasswordAsync(uidAS, pwdAS, null);
        }
        
        /// <remarks/>
        public void GetIT_PasswordAsync(string uidAS, string pwdAS, object userState) {
            if ((this.GetIT_PasswordOperationCompleted == null)) {
                this.GetIT_PasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIT_PasswordOperationCompleted);
            }
            this.InvokeAsync("GetIT_Password", new object[] {
                        uidAS,
                        pwdAS}, this.GetIT_PasswordOperationCompleted, userState);
        }
        
        private void OnGetIT_PasswordOperationCompleted(object arg) {
            if ((this.GetIT_PasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIT_PasswordCompleted(this, new GetIT_PasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIT_Connection", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetIT_Connection(string uidAS, string pwdAS) {
            object[] results = this.Invoke("GetIT_Connection", new object[] {
                        uidAS,
                        pwdAS});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIT_ConnectionAsync(string uidAS, string pwdAS) {
            this.GetIT_ConnectionAsync(uidAS, pwdAS, null);
        }
        
        /// <remarks/>
        public void GetIT_ConnectionAsync(string uidAS, string pwdAS, object userState) {
            if ((this.GetIT_ConnectionOperationCompleted == null)) {
                this.GetIT_ConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIT_ConnectionOperationCompleted);
            }
            this.InvokeAsync("GetIT_Connection", new object[] {
                        uidAS,
                        pwdAS}, this.GetIT_ConnectionOperationCompleted, userState);
        }
        
        private void OnGetIT_ConnectionOperationCompleted(object arg) {
            if ((this.GetIT_ConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIT_ConnectionCompleted(this, new GetIT_ConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ParameterValue {
        
        /// <remarks/>
        ParameterValue1,
        
        /// <remarks/>
        ParameterValue2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.9037.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ConnectAS400 {
        
        /// <remarks/>
        Yes,
        
        /// <remarks/>
        No,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ChangePasswordDBServiceCompletedEventHandler(object sender, ChangePasswordDBServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordDBServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordDBServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ChangePasswordUserCompletedEventHandler(object sender, ChangePasswordUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void ChangeParameterASCompletedEventHandler(object sender, ChangeParameterASCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeParameterASCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeParameterASCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetParameter1CompletedEventHandler(object sender, GetParameter1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParameter1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParameter1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Parameter1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetParameterBySoapCompletedEventHandler(object sender, GetParameterBySoapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParameterBySoapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParameterBySoapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetParameter2CompletedEventHandler(object sender, GetParameter2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParameter2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParameter2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string Parameter1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string Parameter2 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetConCompletedEventHandler(object sender, GetConCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CheckAuthenCompletedEventHandler(object sender, CheckAuthenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAuthenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAuthenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public object[] UserDetail {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public object[] UserRole {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CheckAuthenByPassCompletedEventHandler(object sender, CheckAuthenByPassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAuthenByPassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAuthenByPassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public object[] UserDetail {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public object[] UserRole {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void CheckAuthenBySoapCompletedEventHandler(object sender, CheckAuthenBySoapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAuthenBySoapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAuthenBySoapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetSystemNameCompletedEventHandler(object sender, GetSystemNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string SystemName {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetSystemNameBySoapCompletedEventHandler(object sender, GetSystemNameBySoapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSystemNameBySoapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSystemNameBySoapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void LogoffCompletedEventHandler(object sender, LogoffCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogoffCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogoffCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void InsertLogCompletedEventHandler(object sender, InsertLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void InsertLogBySoapCompletedEventHandler(object sender, InsertLogBySoapCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertLogBySoapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertLogBySoapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void EncryptCompletedEventHandler(object sender, EncryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void EncryptCitizenCompletedEventHandler(object sender, EncryptCitizenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptCitizenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptCitizenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DecryptCitizenCompletedEventHandler(object sender, DecryptCitizenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptCitizenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecryptCitizenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void DecryptCompletedEventHandler(object sender, DecryptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DecryptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DecryptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string ErrorMSG {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void Encrypt1CompletedEventHandler(object sender, Encrypt1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Encrypt1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Encrypt1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void EncryptType2StringCompletedEventHandler(object sender, EncryptType2StringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EncryptType2StringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EncryptType2StringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetIT_UserCompletedEventHandler(object sender, GetIT_UserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIT_UserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIT_UserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetIT_PasswordCompletedEventHandler(object sender, GetIT_PasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIT_PasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIT_PasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    public delegate void GetIT_ConnectionCompletedEventHandler(object sender, GetIT_ConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9037.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIT_ConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIT_ConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591